package com.webDeveloperEmre.javafullStackwebApp.model;


import lombok.*;
import org.hibernate.Metamodel;
import javax.persistence.*;
import javax.persistence.metamodel.EntityType;
import java.util.HashMap;
import java.util.function.Function;

@NoArgsConstructor      //generates a no-argument constructor for a class.
@RequiredArgsConstructor//generates a constructor with parameters for all FINAL and NON-NULL fields in a class
@AllArgsConstructor     //generates a constructor with parameters for all fields in a class
@Builder
@Data                  //annotation is used to generate boilerplate code for a class, including getters, setters, and toString, equals, and hashCode methods.

@Entity                //creates user table in mySQL
//@Table//(name = "users") //changing the table name from User -> users
public class User
{
    @Id                                                   //The "@Id" annotation is used to specify which field in an entity class serves as the primary key for the corresponding database table.
    @GeneratedValue(strategy = GenerationType.IDENTITY)   //The "@GeneratedValue" annotation indicates that the value of this field will be automatically generated by the system, so there's no need to assign a value to it manually.
    private Long id;                                      //strategy = GenerationType.IDENTITY->generating primary keys in JPA. It relies on the auto-increment feature of the underlying database.

    @NonNull//lombok
    private String username;

    private String name;

    private  String email;

   // @Transient  //be used to indicate that a particular field in an entity class should not be persisted to the database.
   // private LocalDate sampleColumnName;

    /*
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
		</dependency>
     */
    //@Column(name="registrationDate")//creates a new column when the name is changed
    //@DateTimeFormat(iso = DateTimeFormat.ISO.DATE)//@DateTimeFormat annotation to specify the format of the date.
    //private LocalDate registrationDate;


    // create a new object with all fields except id using Java functional programming
    public Object createUserObjectWithoutId() {
        Function<User, Object> mapper = (user) -> {
            return new Object() {
                String email = user.getEmail();
                String name = user.getName();
                String username = user.getUsername();

                @Override
                public String toString() {
                    return "User{email='" + email + "', name='" + name + "', username='" + username + "'}";
                }
            };
        };

        return mapper.apply(this);
    }




    public static HashMap<String, String> getDatabaseAndTableNames(Class<?> entityClass, EntityManager entityManager)
    {
        Metamodel metamodel = (Metamodel) ReusableObjects.entityManagerFactory.getMetamodel();
        EntityType<?> entityType = metamodel.entity(entityClass);
        String tableName = entityType.getName();


        Query query = entityManager.createNativeQuery("SELECT DATABASE()");
        String databaseName = (String) query.getSingleResult();

        HashMap<String, String> map = new HashMap<>();
        map.put("databaseName", databaseName);
        map.put("tableName", tableName);
        return map;


    }


}
